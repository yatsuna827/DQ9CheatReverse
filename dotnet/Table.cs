using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace DQ9TreasureMap
{
    internal static class TreasureMapDataTable
    {
        static TreasureMapDataTable()
        {
            TreasureMapDataTable.CreateReverseSeedTable();
        }

        public static ReadOnlyCollection<ushort> GetReverseSeedTable(ushort seed)
        {
            if (TreasureMapDataTable._reverseSeedTable.ContainsKey(seed))
            {
                return TreasureMapDataTable._reverseSeedTable[seed].AsReadOnly();
            }
            return null;
        }

        public static void CreateReverseSeedTable()
        {
            for (uint num = 0U; num < 65536U; num += 1U)
            {
                uint num2 = num * 0x41c64e6dU + 0x3039U;
                num2 = (num2 * 0x41c64e6dU + 0x3039U >> 16 & 0x7FFFU);
                if (TreasureMapDataTable._reverseSeedTable.ContainsKey((ushort)num2))
                {
                    TreasureMapDataTable._reverseSeedTable[(ushort)num2].Add((ushort)num);
                }
                else
                {
                    List<ushort> list = new List<ushort>();
                    list.Add((ushort)num);
                    TreasureMapDataTable._reverseSeedTable.Add((ushort)num2, list);
                }
            }
        }

        public static int SeedCount
        {
            get
            {
                return TreasureMapDataTable._reverseSeedTable.Count;
            }
        }

        private static Dictionary<ushort, List<ushort>> _reverseSeedTable = new Dictionary<ushort, List<ushort>>();

        public static string[] TreasureMapName1_Table = new string[]
        {
            "はかなき",
            "ちいさな",
            "うす暗き",
            "ゆらめく",
            "ざわめく",
            "ねむれる",
            "怒れる",
            "呪われし",
            "放たれし",
            "けだかき",
            "わななく",
            "残された",
            "見えざる",
            "あらぶる",
            "とどろく",
            "大いなる"
        };

        public static string[] TreasureMapName2_Table = new string[]
        {
            "花の",
            "岩の",
            "風の",
            "空の",
            "獣の",
            "夢の",
            "影の",
            "大地の",
            "運命の",
            "魂の",
            "闇の",
            "光の",
            "魔神の",
            "星々の",
            "悪霊の",
            "神々の"
        };

        public static string[] TreasureMapName3_Table = new string[]
        {
            "洞くつ",
            "坑道",
            "アジト",
            "道",
            "墓場",
            "巣",
            "世界",
            "奈落",
            "地下道",
            "遺跡",
            "迷宮",
            "雪道",
            "氷穴",
            "雪原",
            "凍土",
            "氷河",
            "沼地",
            "地底湖",
            "湿原",
            "水脈",
            "眠る地",
            "火口",
            "牢ごく",
            "じごく"
        };

        public static string[] TreasureMapMapTypeName_Table = new string[]
        {
            "洞窟",
            "遺跡",
            "氷",
            "水",
            "火山"
        };

        public static string[] TreasureMapPlaceName_Table = new string[]
        {
            "ウォルロ地方",
            "西セントシュタイン",
            "東セントシュタイン",
            "エラフィタ地方",
            "ほろびのもり",
            "東ベクセリア地方",
            "西ベクセリア地方",
            "アユルダーマとう",
            "ベレンのきしべ",
            "カラコタ地方",
            "ビタリへいげん",
            "サンマロウ地方",
            "ビタリかいがん",
            "あめのしま",
            "グビアナさばく",
            "アシュバル地方",
            "エルマニオンかいがん",
            "エルマニオンせつげん",
            "アイスバリーかいがん",
            "ヤハーンしっち",
            "カルバド大そうげん",
            "カズチィチィ山",
            "ダダマルダ山",
            "ジャーホジ地方",
            "オンゴリのがけ",
            "東ナザム地方",
            "西ナザム地方",
            "竜のもん",
            "竜のしっぽ地方",
            "竜のつばさ地方",
            "竜のあぎと地方",
            "竜のくび地方",
            "ガナンていこくりょう",
            "不明"
        };

        public static byte[] TreasureMapPlace_Table = new byte[]
        {
            33,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            5,
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            9,
            9,
            9,
            10,
            10,
            10,
            11,
            11,
            11,
            11,
            11,
            12,
            12,
            12,
            13,
            14,
            14,
            14,
            14,
            14,
            14,
            14,
            15,
            15,
            15,
            15,
            16,
            16,
            16,
            16,
            16,
            17,
            17,
            17,
            17,
            17,
            18,
            18,
            18,
            19,
            19,
            19,
            19,
            19,
            19,
            19,
            20,
            20,
            20,
            20,
            20,
            21,
            21,
            21,
            21,
            22,
            22,
            22,
            21,
            21,
            21,
            23,
            23,
            23,
            24,
            24,
            24,
            6,
            25,
            25,
            25,
            25,
            26,
            26,
            26,
            26,
            26,
            27,
            27,
            28,
            28,
            28,
            28,
            29,
            29,
            29,
            28,
            28,
            30,
            30,
            30,
            30,
            31,
            31,
            31,
            32,
            32,
            0,
            2,
            2,
            6,
            6,
            7,
            7,
            12,
            12,
            12,
            14,
            15,
            18,
            24,
            25,
            26,
            28
        };

        public static byte[] TreasureMapName3_IndexTable = new byte[]
        {
            0,
            8,
            0,
            0,
            0,
            1,
            1,
            11,
            16,
            1,
            2,
            2,
            12,
            17,
            21,
            3,
            3,
            13,
            18,
            22,
            4,
            4,
            4,
            4,
            4,
            5,
            9,
            14,
            19,
            5,
            6,
            6,
            6,
            6,
            6,
            7,
            10,
            15,
            20,
            23
        };

        public static byte[] TableA = new byte[]
        {
            1, 30, 0, 0,
            2, 40, 0, 0,
            3, 10, 0, 0,
            4, 10, 0, 0,
            5, 10, 0, 0
        };

        public static byte[] TableB = new byte[]
        {
            2, 55, 2, 4,
            56, 75, 4, 6,
            76, 100, 6, 10,
            101, 120, 8, 12,
            121, 140, 10, 14,
            141, 180, 10, 16,
            181, 200, 11, 16,
            201, 220, 12, 16,
            221, 248, 14, 16
        };

        public static byte[] TableC = new byte[]
        {
            2, 55, 1, 3,
            56, 75, 2, 4,
            76, 100, 3, 5,
            101, 140, 4, 6,
            141, 180, 5, 7,
            181, 200, 6, 9,
            201, 220, 8, 9,
            221, 248, 9, 9
        };

        public static byte[] TableD = new byte[]
        {
            2, 60, 1, 3,
            61, 80, 2, 5,
            81, 100, 3, 7,
            101, 120, 4, 7,
            121, 140, 5, 9,
            141, 160, 6, 9,
            161, 180, 7, 10,
            181, 200, 8, 12,
            201, 248, 1, 12
        };

        // 2個ペアだが、1つ目の要素は要らないみたい
        public static byte[] TableE = new byte[]
        {
            1, 100,
            2, 100,
            3, 75,
            4, 75,
            5, 50,
            6, 50,
            7, 30,
            8, 20,
            9, 20,
            10, 20,
            11, 10,
            12, 10
        };

        public static byte[] TableF = new byte[]
        {
             1, 1, 2, 0,
             2, 1, 2, 0,
             3, 1, 3, 0,
             4, 1, 4, 0,
             5, 2, 5, 0,
             6, 2, 6, 0,
             7, 3, 7, 0,
             8, 3, 8, 0,
             9, 4, 9, 0,
            10, 5, 9, 0,
            11, 1, 10, 0,
            12, 4, 10, 0
        };

        public static byte[] TableG = new byte[]
        {
            2, 3, 1, 2,
            4, 5, 1, 3,
            6, 7, 1, 4,
            8, 9, 2, 5,
            10, 11, 2, 6,
            12, 13, 3, 7,
            14, 15, 4, 8,
            16, 16, 6, 8
        };

        public static byte[] TableH = new byte[]
        {
            1, 2, 1, 5,
            3, 4, 4, 8,
            5, 6, 7, 12,
            7, 8, 7, 16,
            9, 9, 12, 16
        };

        public static byte[] TableI = new byte[]
        {
            1, 3, 1, 6,
            4, 6, 4, 9,
            7, 9, 7, 12,
            10, 12, 10, 16
        };

        public static byte[] TableJ = new byte[]
        {
            0,
            1,
            2,
            4,
            3
        };

        public static ushort[] TableK = new ushort[]
        {
            // mapType: 0
            0x0008, 0x000B, 0x000E, 0x0022, 0x0026, 0x0027, 0x0028, 0x0082, 0x008C,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0036, 0x003B, 0x0063, 0x0087, 0x00BD,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0034, 0x0083, 0x008B, 0x0099, 0x0101,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0076, 0x007C, 0x0080, 0x00AE, 0x00D9,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0052, 0x007D, 0x00B6, 0x00C5, 0x00DD,
            0x0008, 0x0026, 0x0027, 0x0028, 0x002F, 0x0089, 0x0097, 0x00A9, 0x0105,
            0x0008, 0x0026, 0x0027, 0x0028, 0x004D, 0x0089, 0x00B4, 0x00B7, 0x00D5,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0037, 0x00C6, 0x00F5, 0x0102, 0x0109,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0035, 0x00AF, 0x00ED, 0x0109, 0x014E,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B5, 0x00ED, 0x00F1, 0x0147, 0x014E,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0035, 0x00D7, 0x00E2, 0x00ED, 0x0147,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00D7, 0x00E2, 0x00EB, 0x00F1, 0x0149,

            // mapType: 1
            0x0008, 0x0026, 0x0027, 0x0028, 0x0053, 0x0077, 0x0084, 0x0096, 0x00BA,
            0x0008, 0x0026, 0x0027, 0x0028, 0x002A, 0x009F, 0x00A4, 0x00C8, 0x00DC,
            0x0008, 0x0026, 0x0027, 0x0027, 0x0028, 0x0040, 0x004C, 0x00A3, 0x00B1,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0034, 0x0062, 0x0086, 0x008F, 0x00AC,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0062, 0x0094, 0x00B2, 0x00CB, 0x00DD,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0097, 0x00A6, 0x00BC, 0x00D5, 0x0105,
            0x0008, 0x001B, 0x0026, 0x0027, 0x0028, 0x00B8, 0x00DE, 0x0105, 0x0141,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0035, 0x004D, 0x00A8, 0x00B8, 0x0141,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0035, 0x00B8, 0x00C2, 0x00EF, 0x0141,
            0x0008, 0x0026, 0x0027, 0x0028, 0x004D, 0x00C2, 0x00EF, 0x00FE, 0x014A,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B9, 0x00E6, 0x00EF, 0x00FE, 0x014A,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00E4, 0x00E5, 0x00E6, 0x00F2, 0x014A,

            // mapType: 2
            0x0008, 0x0008, 0x0026, 0x0026, 0x0027, 0x0028, 0x0067, 0x006A, 0x006D,
            0x0008, 0x0012, 0x0026, 0x0027, 0x0028, 0x005F, 0x0065, 0x0072, 0x00CA,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0068, 0x006D, 0x00A5, 0x00E8, 0x00E9,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0056, 0x0079, 0x00A2, 0x00A5, 0x00D9,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0031, 0x00BE, 0x00CC, 0x00D9, 0x0103,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B2, 0x00B7, 0x00C1, 0x00CC, 0x0103,
            0x0008, 0x0026, 0x0027, 0x0028, 0x002F, 0x00B7, 0x00C1, 0x00CE, 0x00DE,
            0x0008, 0x0026, 0x0027, 0x0028, 0x005D, 0x00C4, 0x00E0, 0x00F3, 0x0143,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B8, 0x00E0, 0x00F7, 0x00FA, 0x0143,
            0x0007, 0x0026, 0x0027, 0x0028, 0x00B9, 0x00F6, 0x00F7, 0x00FA, 0x0000,
            0x0007, 0x0026, 0x0027, 0x0028, 0x00EC, 0x00F6, 0x00FA, 0x0145, 0x0000,
            0x0007, 0x0026, 0x0027, 0x0028, 0x00EC, 0x00F4, 0x00F8, 0x0145, 0x0000,

            // mapType: 3
            0x0008, 0x0026, 0x0027, 0x0028, 0x003D, 0x005E, 0x009D, 0x00CF, 0x0104,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0051, 0x0095, 0x009E, 0x00B3, 0x00D4,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0059, 0x006E, 0x00A2, 0x00CD, 0x0104,
            0x0008, 0x0013, 0x0026, 0x0027, 0x0028, 0x005A, 0x00A0, 0x00FF, 0x0106,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0057, 0x0060, 0x0070, 0x00B4, 0x0107,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0057, 0x00A8, 0x00A9, 0x00B4, 0x0102,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0037, 0x00A8, 0x00AF, 0x00DA, 0x0102,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B5, 0x00DA, 0x00F3, 0x00F5, 0x014B,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00F0, 0x00F3, 0x00F5, 0x00F8, 0x014B,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00F0, 0x00F8, 0x00FB, 0x010C, 0x014B,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B0, 0x00F8, 0x00FB, 0x00FD, 0x010C,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B0, 0x00FD, 0x0108, 0x010C, 0x0148,

            // mapType: 4
            0x0008, 0x0026, 0x0027, 0x0028, 0x003E, 0x0074, 0x007B, 0x007F, 0x00C8,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0086, 0x0087, 0x008D, 0x00BB, 0x00D0,
            0x0008, 0x0015, 0x0026, 0x0027, 0x0028, 0x002C, 0x0078, 0x008C, 0x00DC,
            0x0008, 0x001B, 0x0026, 0x0027, 0x0028, 0x0040, 0x0078, 0x00A7, 0x00B1,
            0x0008, 0x0026, 0x0027, 0x0028, 0x0080, 0x0088, 0x0092, 0x00A7, 0x00C9,
            0x0008, 0x0026, 0x0027, 0x0028, 0x002E, 0x006B, 0x00B2, 0x00C0, 0x00DF,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00AA, 0x00C0, 0x00C3, 0x00C6, 0x00DF,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00C3, 0x00D5, 0x00D6, 0x00DA, 0x00FC,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00B5, 0x00D6, 0x00F9, 0x00FC, 0x0109,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00C7, 0x00F9, 0x00FC, 0x0109, 0x0144,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00AB, 0x00C7, 0x00F9, 0x0144, 0x014D,
            0x0008, 0x0026, 0x0027, 0x0028, 0x00AB, 0x00C7, 0x00E7, 0x00EE, 0x014D,
        };

        public static byte[] TableL = new byte[]
        {
            12,
            16,
            16,
            12,
            16,
            12,
            16,
            20,
            16,
            12,
            16,
            12,
            16,
            16,
            16,
            16,
            20,
            20,
            16,
            12,
            16,
            16,
            12,
            16,
            16,
            16,
            16,
            12,
            12,
            12,
            12,
            16,
            12,
            16,
            16,
            20,
            16,
            16,
            12,
            20,
            8,
            16,
            16,
            16,
            8,
            16,
            16,
            16,
            16,
            16,
            12,
            20,
            16,
            16,
            12,
            12,
            16,
            20,
            20,
            16,
            20,
            12,
            12,
            16,
            16,
            20,
            20,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            12,
            32,
            24,
            20,
            16,
            20,
            16,
            16,
            12,
            20,
            20,
            16,
            8,
            16,
            12,
            16,
            16,
            28,
            16,
            8,
            12,
            16,
            20,
            20,
            8,
            16,
            12,
            16,
            16,
            12,
            16,
            20,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            20,
            16,
            12,
            16,
            12,
            12,
            12,
            12,
            12,
            12,
            16,
            16,
            20,
            16,
            16,
            12,
            8,
            16,
            12,
            16,
            16,
            16,
            16,
            16,
            20,
            16,
            16,
            16,
            20,
            20,
            16,
            20,
            16,
            20,
            12,
            16,
            16,
            16,
            20,
            16,
            16,
            16,
            20,
            16,
            16,
            16,
            12,
            16,
            20,
            16,
            16,
            16,
            16,
            20,
            16,
            28,
            16,
            20,
            20,
            16,
            16,
            12,
            20,
            16,
            20,
            16,
            16,
            16,
            16,
            16,
            20,
            16,
            20,
            16,
            16,
            16,
            20,
            16,
            16,
            16,
            16,
            16,
            16,
            20,
            24,
            20,
            24,
            16,
            12,
            12,
            8,
            16,
            16,
            16,
            16,
            20,
            16,
            16,
            20,
            20,
            16,
            16,
            16,
            16,
            12,
            20,
            16,
            16,
            16,
            16,
            20,
            16,
            16,
            20,
            16,
            16,
            16,
            16,
            16,
            20,
            20,
            16,
            16,
            16,
            12,
            12,
            16,
            16,
            16,
            16,
            20,
            16,
            12,
            16,
            12,
            16,
            12,
            12,
            12,
            16,
            16,
            16,
            20,
            12,
            16,
            12,
            20,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            20,
            16,
            16,
            16,
            16,
            12,
            12,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            12,
            24,
            28,
            28,
            24,
            12,
            28,
            32,
            8,
            32,
            32,
            32,
            12,
            28,
            28,
            28,
            40,
            40,
            28,
            28,
            28,
            20,
            16,
            16,
            16,
            20,
            32,
            16,
            20,
            20,
            16,
            16,
            16,
            20,
            12,
            40,
            40,
            28,
            12,
            24,
            12,
            20,
            32,
            16,
            28,
            28,
            28,
            12,
            20,
            8,
            12,
            8,
            12,
            12,
            16,
            8,
            16,
            12,
            8,
            20,
            12,
            12,
            16,
            20,
            20,
            8,
            8,
            8,
            8,
            12,
            12,
            12,
            12,
            8,
            8,
            8,
            8,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            16,
            16,
            16,
            16,
            16,
            8,
            8,
            8,
            8,
            8,
            8,
            16,
            16,
            16,
            16,
            16,
            16,
            20,
            20,
            20,
            20,
            20,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            12,
            32,
            40,
            40,
            28,
            28,
            28,
            28,
            28,
            28,
            32,
            32,
            12,
            12,
            32,
            16,
            24,
            24,
            28,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            12,
            12,
            8,
            8,
            12,
            28,
            20
        };

        public static ushort[] TableM = new ushort[]
        {
            0x0000,
            0x0000,
            0x0001,
            0x0002,
            0x0003,
            0x0004,
            0x0005,
            0x0006,
            0x0007,
            0x0008,
            0x0009,
            0x000A,
            0x000B,
            0x000C,
            0x000D,
            0x000E,
            0x000F,
            0x0010,
            0x0011,
            0x0012,
            0x0013,
            0x0014,
            0x0015,
            0x0016,
            0x0017,
            0x0018,
            0x0019,
            0x001A,
            0x001B,
            0x001C,
            0x001D,
            0x001E,
            0x001F,
            0x0020,
            0x0021,
            0x0022,
            0x0023,
            0x0024,
            0x0025,
            0x0026,
            0x0027,
            0x0028,
            0x0029,
            0x002A,
            0x002B,
            0x002C,
            0x002D,
            0x002E,
            0x002F,
            0x0030,
            0x0031,
            0x0032,
            0x0033,
            0x0034,
            0x0035,
            0x0036,
            0x0037,
            0x0038,
            0x0039,
            0x003A,
            0x003B,
            0x003C,
            0x003D,
            0x003E,
            0x003F,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0000,
            0x0040,
            0x0041,
            0x0042,
            0x0043,
            0x0044,
            0x0045,
            0x0046,
            0x0047,
            0x0048,
            0x0049,
            0x004A,
            0x004B,
            0x004C,
            0x004D,
            0x004E,
            0x004F,
            0x0050,
            0x0051,
            0x0052,
            0x0053,
            0x0054,
            0x0055,
            0x0056,
            0x0057,
            0x0058,
            0x0059,
            0x005A,
            0x005B,
            0x005C,
            0x005D,
            0x005E,
            0x005F,
            0x0060,
            0x0061,
            0x0062,
            0x0063,
            0x0064,
            0x0065,
            0x0066,
            0x0067,
            0x0068,
            0x0069,
            0x006A,
            0x006B,
            0x006C,
            0x006D,
            0x006E,
            0x006F,
            0x0070,
            0x0071,
            0x0072,
            0x0073,
            0x0074,
            0x0075,
            0x0076,
            0x0077,
            0x0078,
            0x0079,
            0x007A,
            0x007B,
            0x007C,
            0x007D,
            0x007E,
            0x007F,
            0x0080,
            0x0081,
            0x0082,
            0x0083,
            0x0084,
            0x0085,
            0x0086,
            0x0087,
            0x0088,
            0x0089,
            0x008A,
            0x008B,
            0x008C,
            0x008D,
            0x008E,
            0x0000,
            0x0000,
            0x0000,
            0x008F,
            0x0090,
            0x0091,
            0x0092,
            0x0093,
            0x0094,
            0x0095,
            0x0096,
            0x0097,
            0x0098,
            0x0099,
            0x009A,
            0x009B,
            0x009C,
            0x009D,
            0x009E,
            0x009F,
            0x00A0,
            0x00A1,
            0x00A2,
            0x00A3,
            0x00A4,
            0x00A5,
            0x00A6,
            0x00A7,
            0x00A8,
            0x00A9,
            0x00AA,
            0x00AB,
            0x00AC,
            0x00AD,
            0x00AE,
            0x00AF,
            0x00B0,
            0x00B1,
            0x00B2,
            0x00B3,
            0x00B4,
            0x00B5,
            0x00B6,
            0x00B7,
            0x00B8,
            0x00B9,
            0x00BA,
            0x00BB,
            0x00BC,
            0x00BD,
            0x00BE,
            0x00BF,
            0x00C0,
            0x00C1,
            0x00C2,
            0x0000,
            0x0000,
            0x0000,
            0x00C3,
            0x00C4,
            0x00C5,
            0x00C6,
            0x00C7,
            0x00C8,
            0x00C9,
            0x00CA,
            0x00CB,
            0x00CC,
            0x00CD,
            0x00CE,
            0x00CF,
            0x00D0,
            0x00D1,
            0x00D2,
            0x00D3,
            0x00D4,
            0x00D5,
            0x00D6,
            0x00D7,
            0x00D8,
            0x00D9,
            0x00DA,
            0x00DB,
            0x00DC,
            0x00DD,
            0x00DE,
            0x00DF,
            0x00E0,
            0x00E1,
            0x00E2,
            0x00E3,
            0x00E4,
            0x00E5,
            0x00E6,
            0x00E7,
            0x00E8,
            0x00E9,
            0x00EA,
            0x00EB,
            0x00EC,
            0x00ED,
            0x00EE,
            0x00EF,
            0x00F0,
            0x00F1,
            0x00F2,
            0x00F3,
            0x00F4,
            0x00F5,
            0x00F6,
            0x00F7,
            0x00F8,
            0x00F9,
            0x00FA,
            0x00FB,
            0x00FC,
            0x00FD,
            0x00FE,
            0x00FF,
            0x0100,
            0x0101,
            0x0102,
            0x0103,
            0x0104,
            0x0105,
            0x0106,
            0x0107,
            0x0108,
            0x0109,
            0x010A,
            0x010B,
            0x010C,
            0x010D,
            0x010E,
            0x010F,
            0x0110,
            0x0111,
            0x0112,
            0x0113,
            0x0114,
            0x0115,
            0x0116,
            0x0117,
            0x0118,
            0x0119,
            0x0000,
            0x011A,
            0x011B,
            0x011C,
            0x011D,
            0x011E,
            0x011F,
            0x0120,
            0x0121,
            0x0122,
            0x0123,
            0x0124,
            0x0125,
            0x0126,
            0x0127,
            0x0128,
            0x0129,
            0x012A,
            0x012B,
            0x012C,
            0x012D,
            0x012E,
            0x012F,
            0x0130,
            0x0131,
            0x0132,
            0x0133,
            0x0134,
            0x0135,
            0x0136,
            0x0137,
            0x0138,
            0x0139,
            0x013A,
            0x013B,
            0x013C,
            0x013D,
            0x013E,
            0x013F,
            0x0140,
            0x0141,
            0x0142,
            0x0143,
            0x0144,
            0x0145,
            0x0146,
            0x0147,
            0x0148,
            0x0149,
        };

        public static byte[] TableN = new byte[]
        {
            1, 1, 2, 0,
            2, 1, 2, 0,
            3, 1, 3, 0,
            4, 1, 4, 0,
            5, 2, 5, 0,
            6, 2, 6, 0,
            7, 3, 7, 0,
            8, 3, 8, 0,
            9, 4, 9, 0,
            10, 5, 9, 0,
            11, 1, 10, 0,
            12, 4, 10, 0
        };

        public static byte[] TableO = new byte[]
        {
            0,
            14,
            28,
            41,
            55,
            71,
            88,
            108,
            125,
            141,
            162
        };

        public static byte[] TableP = new byte[]
        {
            10,
            10,
            5,
            10,
            10,
            8,
            5,
            8,
            10,
            10,
            2,
            8,
            2,
            2,
            8,
            8,
            10,
            2,
            10,
            10,
            10,
            10,
            8,
            8,
            10,
            2,
            2,
            2,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            1,
            10,
            10,
            5,
            2,
            2,
            5,
            15,
            15,
            12,
            10,
            15,
            12,
            2,
            5,
            5,
            1,
            1,
            1,
            1,
            5,
            15,
            10,
            15,
            1,
            1,
            1,
            1,
            1,
            1,
            10,
            10,
            1,
            12,
            1,
            15,
            10,
            15,
            15,
            15,
            10,
            6,
            1,
            1,
            10,
            1,
            10,
            1,
            1,
            1,
            1,
            1,
            1,
            10,
            10,
            10,
            10,
            10,
            15,
            6,
            2,
            2,
            15,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            5,
            13,
            13,
            10,
            15,
            15,
            15,
            5,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            10,
            10,
            10,
            10,
            10,
            15,
            10,
            10,
            8,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            15,
            10,
            10,
            10,
            15,
            10,
            8,
            5,
            5,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1
        };

        public static byte[] TableQ = new byte[]
        {
            12,
            14,
            16,
            15,
            7,
            18,
            28,
            23,
            27,
            0,
            29,
            13,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            22,
            19,
            1,
            7,
            46,
            37,
            38,
            39,
            40,
            140,
            41,
            11,
            42,
            7,
            2,
            43,
            44,
            45,
            49,
            8,
            50,
            51,
            139,
            52,
            53,
            11,
            8,
            16,
            3,
            54,
            47,
            48,
            76,
            55,
            56,
            57,
            139,
            24,
            58,
            16,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            11,
            68,
            20,
            139,
            21,
            69,
            8,
            70,
            71,
            72,
            73,
            74,
            75,
            11,
            77,
            78,
            79,
            80,
            81,
            82,
            139,
            83,
            84,
            85,
            17,
            4,
            25,
            86,
            87,
            11,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            17,
            5,
            11,
            9,
            10,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            6,
            17,
            11,
            9,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            9,
            124,
            17,
            125,
            26,
            10,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138
        };

        public static string[] TableR = new string[]
        {
            "125G",
            "268G",
            "450G",
            "670G",
            "880G",
            "1500G",
            "3000G",
            "グビアナどうか",
            "グビアナぎんか",
            "グビアナきんか",
            "きんかい",
            "ちいさなメダル",
            "やくそう",
            "上やくそう",
            "おもいでのすず",
            "せいすい",
            "まほうのせいすい",
            "けんじゃのせいすい",
            "どくけしそう",
            "上どくけしそう",
            "あやかしそう",
            "おかしなくすり",
            "いやしそう",
            "まんげつそう",
            "ばんのうぐすり",
            "超ばんのうぐすり",
            "せかいじゅのは",
            "キメラのつばさ",
            "こんぼう",
            "ニーソックス",
            "ぎんのリスト",
            "うさぎのおまもり",
            "まりょくの土",
            "ようがんのカケラ",
            "天使のすず",
            "シルバートレイ",
            "げんこつダケ",
            "てつのクギ",
            "きんのゆびわ",
            "きんのブレスレット",
            "てっかめん",
            "ガマのあぶら",
            "げんこつダケ",
            "てっこうせき",
            "スライムトレイ",
            "ルビーのげんせき",
            "ばくだん石",
            "つけもの石",
            "かがみ石",
            "命の石",
            "ちからのゆびわ",
            "はやてのリング",
            "どくどくヘドロ",
            "花のみつ",
            "ひらめきのジュエル",
            "ふしぎなボレロ",
            "せいじゃのはい",
            "うらみのほうじゅ",
            "ヘパイトスのひだね",
            "あらくれベルト",
            "メイド服",
            "あらくれブーツ",
            "あらくれマスク",
            "ヘッドドレス",
            "あらくれズボン",
            "ぶどうエキス",
            "とうこんエキス",
            "あぶないビスチェ",
            "まてきの杖",
            "ヘパイトスのひだね",
            "天使のはね",
            "ヘビーメタル",
            "ぶしんのリスト",
            "オープンフィンガー",
            "ミスリルこうせき",
            "古強者のグローブ",
            "ゆうわくの弓",
            "じごくの弓",
            "しんかんのブーツ",
            "ドクロのゆびわ",
            "まじんのかなづち",
            "サタンヘルム",
            "あくまのムチ",
            "せいじゃのはい",
            "ヘビーメタル",
            "ほしのカケラ",
            "しわよせのくつ",
            "しわよせのぼうし",
            "古強者のよろい",
            "だいまどうシューズ",
            "古強者のブーツ",
            "ぶしんのブーツ",
            "まじょのブーツ",
            "しんかんのタイツ",
            "はめつの盾",
            "さとりのワンピース",
            "ドクロのかぶと",
            "マタドールグラブ",
            "パンドラボックス",
            "せいれいせき",
            "ミスリルこうせき",
            "えいゆうのやり",
            "こがらしのダガー",
            "ドラゴンの杖",
            "カルベロビュート",
            "まじゅうのツメ",
            "風林火山",
            "ふんさいのおおなた",
            "メガトンハンマー",
            "ペンタグラム",
            "パンドラボックス",
            "天使のはね",
            "げんませき",
            "しにがみの首かざり",
            "オリハルコン",
            "メタスラの剣",
            "メタスラのやり",
            "メタスラの盾",
            "メタスラよろい",
            "メタスラヘルム",
            "メタスラのこて",
            "メタスラブーツ",
            "パンドラボックス",
            "リサイクルストーン",
            "おもいでのすず",
            "天使のソーマ",
            "オリハルコン",
            "ほしくずのつるぎ",
            "きしんのまそう",
            "サウザンドダガー",
            "ひかりの杖",
            "グリンガムのムチ",
            "しゅらのこん",
            "竜王のツメ",
            "ひっさつのおうぎ",
            "グレートアックス",
            "大地くだき",
            "メテオエッジ",
            "天使の弓",
            "ミミック",
            "ひとくいばこ"
        };
    }
}
